{"name":"WebPDA","tagline":"WebSocket based Process Data Access","body":"WebSocket based Process Data Access\r\n=====\r\n\r\nWebSocket based Process Data Access (WebPDA) is a protocol to access process data using standard WebSocket technology. \r\n\r\nProcess data is data related to a process, during which the value of a variable may change along with a process. \r\n\r\nThe variable in a process is called [Process Variable (PV)](http://en.wikipedia.org/wiki/Process_variable). For example,\r\nthe temperature of a furnace,  the price of a stock, the blood pressure of a person can all be considered as PV,\r\nso WebPDA can be widely used for SCADA, financial, health, weather, environment monitoring, measurement and control systems etc,.\r\n\r\nGoals & features:\r\n----------------\r\n\r\nWebPDA provided a simple and general way to push realtime changing process data to the web. \r\n\r\nOn server side, it provides an interface that allows easy extension of data sources. \r\nCurrently, it only has Java implementation using JSR356 with Glassfish. Potentially, it can \r\nbe implemented with any language that supports WebSocket. \r\nCurrently, it has a control system data source implemented on [PVManager](http://pvmanager.sourceforge.net/), so it can be used for control system \r\nsuch as [EPICS](http://www.aps.anl.gov/epics/).\r\n\r\nOn client side,  it allows corresponding extension to parse the newly added data source on server side.\r\nThe client side can also be implemented with any language that supports WebSocket. Currently,\r\nit provides a JavaScript library for web browser.\r\n\r\nWeb Browser Client Example\r\n----------------\r\nwebpda-core.js is the core of WebPDA JavaScript library.\r\nThe control system extension is webpda-cs.js.\r\n\r\nHTML page\r\n```HTML\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<script src=\"webpda-core.js\"></script>\r\n<script src=\"webpda-cs.js\"></script>\r\n</head>\r\n<body>\r\nsim://noise <input type=\"submit\" value=\"Close PV\" onclick=\"closePV();\" /><br>\r\n<div id=\"output\">Output:</div>\r\n<script src=\"simpledemo.js\"></script>\r\n</body>\r\n</html>\r\n```\r\n\r\nsimpledemo.js\r\n```JavaScript\r\n\r\nvar wsUri = \"ws://localhost:8080/org.webpda.server.jsr356.war/webpda\";\r\n\r\nvar wp = new WebPDA(wsUri, \"webpda\", \"123456\");\r\n\r\nvar output = document.getElementById(\"output\");\r\nfunction writeToScreen(message) {\r\n\toutput.innerHTML += message + \"<br>\";\r\n}\r\n\r\n// create a pv whose name is sim://noise, maximum update rate at 1hz, don't buffer value.\r\nvar pv = wp.createPV(\"sim://noise\", 1000, false);\r\n\r\n// add listener to the pv.\r\npv.addListenerFunc(function(evt, pv, data) {\r\n\tswitch (evt) {\r\n\tcase \"conn\":\r\n\t\twriteToScreen(\"connected\");\r\n\t\tbreak;\r\n\tcase \"val\":\r\n\t\twriteToScreen(pv.getValue());\r\n\t\tbreak;\r\n\tcase \"bufVal\":\r\n\t\t// if value is buffered, it will receive an array of buffered values.\r\n\t\tbreak;\r\n\tcase \"error\":\r\n\t\twriteToScreen(\"Error: \" + data);\r\n\t\tbreak;\r\n\tcase \"writePermission\":\r\n\t\t// write permission changed.\r\n\t\tbreak;\r\n\tcase \"writeFinished\":\r\n\t\t// write operation finished.\r\n\t\tbreak;\r\n\tdefault:\r\n\t\tbreak;\r\n\t}\r\n});\r\n\r\nfunction closePV() {\r\n\tpv.close();\r\n}\r\n\r\n```\r\n","google":"13250727","note":"Don't delete this file! It's used internally to help with page regeneration."}